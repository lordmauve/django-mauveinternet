from django.db import models

from django.core.mail import EmailMessage
from django.template import Template, Context, RequestContext, ContextPopException

class TemplateEmail(models.Model):
	slug = models.SlugField('Internal name for referencing this e-mail', editable=False)
	sender = models.EmailField()
	
	subject = models.CharField("Django template for generating the subject", max_length=255)
	body = models.TextField("Django template for generating the body")

	def __unicode__(self):
		return self.slug

	class Admin:
		list_display = ['slug', 'sender', 'subject']

	class Meta:
		verbose_name = u'e-mail template'

	def to_email(self, args, recipients, context=None):
		"""Build a concrete e-mail instance addressed to the addresses in the list recipients
		using the template variables args.

		Returns an instance of django.core.mail.EmailMessage, ie ready for attachments or
		sending."""

		if context is None:
			context = Context(args)
		else:
			context.update(args)

		try:
			subject_template = self.subject_template
		except AttributeError:
			subject_template = Template(self.subject)
			self.subject_template = subject_template

		try:
			body_template = self.body_template
		except AttributeError:
			body_template = Template(self.body)
			self.body_template = body_template

		subject = subject_template.render(context)
		body = body_template.render(context)

		try:
			context.pop()
		except ContextPopException:
			pass

		return EmailMessage(subject=subject, body=body, from_email=self.sender, to=recipients, bcc=['dan@mauveinternet.co.uk'])

	def send_to_all(self, args, recipients, context=None):
		"""Sends an e-mail to each django.contrib.auth.models.User in recipients,
		individually generated by the template system with the context
		provided augmented with the variable 'recipient' set for the corresponding
		recipient."""

		for r in recipients:
			rargs = {}
			rargs.update(args)
			rargs['recipient'] = r
			msg = self.to_email(rargs, [r.email], context=context)
			msg.send()

	@staticmethod
	def get(slug, sender, subject, body):
		"""Shortcut method for retrieving a TemplateEmail from the database, using the defaults given if it doesn't exist.
		Also places the default into the database for later customisation."""

		email, created = TemplateEmail.objects.get_or_create(slug=slug, defaults={'sender': sender, 'subject': subject, 'body': body})
		return email
