import re
import os.path

from django.conf import settings

from django.db.models import ImageField, signals
from django.dispatch import dispatcher
from django.utils.functional import curry

from PIL import Image


class ThumbnailImageField(ImageField):
	"""Allows model instance to specify upload_to dynamically; also manages a set of thumbnails
	as generated by a custom set of thumbnail generators.

	Model class may have a method like:

		def get_FOO_upload_to(self):
			return 'path/to/%d' % self.id

	Based on: http://scottbarnham.com/blog/2007/07/31/uploading-images-to-a-dynamic-path-with-django/
	"""
	def __init__(self, thumbnails={}, *args, **kwargs):
		dargs = {'upload_to': 'uploaded-images/'}
		dargs.update(kwargs)
		super(ThumbnailImageField, self).__init__(*args, **dargs)
		self.thumbnails = thumbnails
	
	def contribute_to_class(self, cls, name):
		"""Hook up events so we can access the instance."""
		super(CustomImageField, self).contribute_to_class(cls, name)
		dispatcher.connect(self._post_init, signals.post_init, sender=cls)
		dispatcher.connect(self.rebuild_thumbnails, signals.post_save, sender=cls)
		dispatcher.connect(self.delete_thumbnails, signals.post_delete, sender=cls)
		for name in self.thumbnails:
			setattr(cls, 'get_%s_thumbnail_%s_url', curry(self.thumbnail_url, name=name))

	def _post_init(self, instance=None):
		"""Get dynamic upload_to value from the model instance."""
		try:
			method = getattr(instance, 'get_%s_upload_to' % self.attname)
		except AttributeError:
			return
		else:
			self.upload_to = method()

	def thumbnail_filename(self, name, instance):
		thumbnailer = self.thumbnails[name]
		filename = getattr(instance, self.attname)
		ext = self.negotiate_output_format(thumbnailer, filename)

		filename = re.sub(r'([^/]+)\.(jpg|png)$', r'\1', filename, re.I)
		return '%s(%s).%s' % (name, filename, ext)

	def thumbnail_url(self, name, instance):
		return settings.MEDIA_URL + self.upload_to + self.thumbnail_filename(name, instance)

	def thumbnail_path(self, name, instance):
		return os.path.join(settings.MEDIA_ROOT, self.upload_to, self.thumbnail_filename(name, instance))

	def rebuild_thumbnails(self, instance=None):
		"""Ensures that all thumbnails for the image exist and are up-to-date,
		rebuilding them if not."""

		im = None	#cache im in case we are generating several thumbnails
		orig = os.path.join(settings.MEDIA_ROOT, getattr(instance, self.attname))
		mtime = os.path.getmtime(orig)
		for name, thumbnailer in self.thumbnails.items():
			thumb = self.thumbnail_filename(name, instance)
			try:
				if os.path.getmtime(thumb) > mtime:
					continue	#thumbnail is up-to-date
			except OSError:
				pass # thumbnail (probably) does not exist

			# generate thumbnail
			if im is None:
				im = Image.open(orig)
			tim = thumbnailer.thumbnail(im)

			if thumb.endswith('.jpg'):
				tim.save(thumb, 'JPEG')
			else:
				tim.save(thumb, 'PNG')

	def negotiate_output_format(self, thumbnailer, input):
		if input.lower().endswith('.png')
			if thumbnailer.output_alpha() != Thumbnailer.FLATTEN_ALPHA:
				return 'PNG'
		else:
			if thumbnailer.output_alpha() != Thumbnailer.CREATE_ALPHA:
				return 'PNG'
		return 'JPEG'

	def delete_thumbnails(self, instance=None):
		"""Deletes all thumbnails for a given image."""
		for name in self.thumbnails:
			thumb = self.thumbnail_filename(name, instance)
			print 'Unlinking', thumb
			# os.unlink(thumb)

	def db_type(self):
		"""Required by Django for ORM."""
		return 'varchar(100)'


class Thumbnailer(object):
	"""The default thumbnailer, and the base class of other thumbnailers.
	
	Thumbnailers handle the generation, but not the file handling, of the
	thumbnails for a ThumbnailImageField.

	The class attribute output_format specifies whether the thumbnailer generates
	RGB or RGBA thumbnails. RGB thumbnails are saved as JPEGs, RGBA thumbnails as
	PNGs.
	"""

	def __init__(self, w=None, h=None)
		if w is None:
			w = 32768	#Infinity!
		if h is None:
			h = 32768	#Infinity!
		self.dims = (w, h)

	PRESERVE_ALPHA = 0	# outputs an alpha channel if and only if the input provided an alpha channel
	CREATE_ALPHA = 1	# always outputs an alpha channel
	FLATTEN_ALPHA = 2	# never outputs an alpha channel

	def output_alpha(self):
		"""Return a constant representing the behaviour of this thumbnailer
		instance with respect to the input alpha.

		The ThumbnailImageField uses this to negotiate whether to generate JPEG or PNG
		thumbnails.
		"""
		return Thumbnailer.PRESERVE_ALPHA

	def thumbnail(self, im):
		"""Called to actually perform the thumbnailing of the object."""
		size = im.size()
		if size[0] < self.dims[0] and size[1] < self.dims[1]:
			return im
		return im.thumbnail(self.dims, Image.ANTIALIAS)


class ZoomingThumbnailer(Thumbnailer):
	"""Generates a thumbnail of an image at a given size, but zoomed in
	by a certain factor on the middle of the image.

	This is primarily useful when generating thumbnails of textures;"""

	def __init__(self, scale_factor, w=None, h=None):
		super(ZoomingThumbnailer, self).__init__(w, h)
		self.scale_factor = scale_factor

	def thumbnail(self, im):
		zoomed_dims = (self.dims[0] * self.scale_factor,
					 self.dims[1] * self.scale_factor)
		zoomed = im.thumbnail(zoomed_dims, Image.ANTIALIAS)
		return im.crop((
			(self.zoomed_dims[0] - self.dims[0])//2,
			(self.zoomed_dims[1] - self.dims[1])//2,
			self.dims[0],
			self.dims[1])
		)
				
